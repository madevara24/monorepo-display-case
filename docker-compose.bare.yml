services:
  # FRONTEND SERVICE (Development)
  frontend:
    build:
      context: ./frontend-display-case
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend-display-case:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - backend-service

  # BACKEND SERVICE
  backend-service:
    build:
      context: ./backend-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file: "backend-service/.env"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    depends_on:
      postgres:
        condition: service_healthy  # Wait for postgres to be healthy
    networks:
      - app-network

  # POSTGRESQL
  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"  
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data: 
